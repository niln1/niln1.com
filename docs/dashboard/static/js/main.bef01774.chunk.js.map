{"version":3,"sources":["config.js","App.js","api.js","serviceWorker.js","index.js"],"names":["color","white","red","green","yellow","blue","apiKey","discoveryDocs","spreadsheetId","temp","App","state","data","error","initClient","window","gapi","client","init","config","then","callback","onLoad","load","sheets","spreadsheets","values","batchGet","ranges","response","result","valueRanges","weight","map","d","Date","Weight","parseFloat","Goal","yt","ORS","pi","PI","cashflow","Cashflow","Ave12Cashflow","setState","renderColorfulLegendText","value","entry","style","this","setInterval","length","className","format","ticking","timezone","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","yAxisId","domain","formatter","strokeWidth","type","stroke","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bef01774.chunk.js","sourcesContent":["export default {\n    color: {\n      white: \"#eeeeee\",\n      red: \"#f05561\",\n      green: \"#35b997\",\n      yellow: \"#fee851\",\n      blue: \"#1da2dc\"\n    },\n    apiKey: \"AIzaSyALKY26sNvyLTcprK5vnY7i27ZcxtIuhEA\",\n    discoveryDocs: \n      [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\n    spreadsheetId: \"14Dx9cHpwnVx2HK1LDTscnsVD-84pEMZ08q808puvl24\"\n  };","import React from 'react';\nimport './App.css';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, CartesianGrid } from 'recharts';\nimport Clock from 'react-live-clock';\n\nimport config from \"./config\";\nimport { load } from \"./api\";\n\n\nconst temp = [];\n\n\nclass App extends React.Component {\n  state = {\n    data: temp,\n    error: null\n  }\n\n  componentDidMount() {\n    window.gapi.load(\"client\", this.initClient);\n    setInterval(this.initClient, 43200000);\n  }\n\n  initClient = () => {\n    window.gapi.client\n      .init({\n        apiKey: config.apiKey,\n        discoveryDocs: config.discoveryDocs\n      })\n      .then(() => {\n      load(this.onLoad);\n    });\n  };\n\n  onLoad = (data, error) => {\n    if (data) {\n      this.setState({ data });\n    } else {\n      this.setState({ error });\n    }\n  };\n\n  renderColorfulLegendText = (value, entry) => {\n  \tconst { color } = entry;\n    \n    return <span style={{ color }}>{value}</span>;\n  };\n\n  render() { \n    if (this.state.error) {\n      return <div>{this.state.error}</div>;\n    }\n    if (this.state.data.length === 0) {\n      return <div></div>;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"box1\">        \n          <Clock className=\"clock\" format={'h:mm A'} ticking={true} timezone={'US/Pacific'} />      \n          <Clock className=\"date\" format={'ddd, MMM Do'} ticking={true} timezone={'US/Pacific'} />\n        </div>\n        <div className=\"Container\">\n          <div>\n            <LineChart width={500} height={300} data={this.state.data.weight}\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n              <CartesianGrid strokeDasharray=\"5 5\" />\n              <XAxis dataKey=\"Date\" />\n              <YAxis yAxisId=\"left\" domain={['auto', 'auto']} />\n              <Tooltip />\n              <Legend formatter={this.renderColorfulLegendText}/>\n              <Line strokeWidth=\"3\" yAxisId=\"left\" type=\"monotone\" dataKey=\"Weight\" stroke={config.color.blue} />\n              <Line strokeWidth=\"3\" yAxisId=\"left\" type=\"monotone\" dataKey=\"Goal\" stroke={config.color.green} />\n            </LineChart>\n          </div>\n          <div>\n            <LineChart width={500} height={300} data={this.state.data.yt}\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n              <CartesianGrid strokeDasharray=\"5 5\" />\n              <XAxis dataKey=\"Date\" />\n              <YAxis yAxisId=\"left\" domain={['auto', 'auto']} />\n              <Tooltip />\n              <Legend formatter={this.renderColorfulLegendText}/>\n              <Line strokeWidth=\"3\" yAxisId=\"left\" type=\"monotone\" dataKey=\"Goal\" stroke={config.color.green} />\n              <Line strokeWidth=\"3\" yAxisId=\"left\" type=\"monotone\" dataKey=\"ORS\" stroke={config.color.blue} />\n            </LineChart>\n          </div>\n          <div>\n            <LineChart width={500} height={300} data={this.state.data.pi}\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n              <CartesianGrid strokeDasharray=\"5 5\" />\n              <XAxis dataKey=\"Date\" />\n              <YAxis yAxisId=\"left\" domain={[0, 'auto']} />\n              <Tooltip />\n              <Legend formatter={this.renderColorfulLegendText}/>\n              <Line strokeWidth=\"3\" yAxisId=\"left\" type=\"monotone\" dataKey=\"Goal\" stroke={config.color.green} />\n              <Line strokeWidth=\"3\" yAxisId=\"left\" type=\"monotone\" dataKey=\"PI\" stroke={config.color.blue} />\n            </LineChart>\n          </div>\n          <div>\n            <LineChart width={500} height={300} data={this.state.data.cashflow}\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n              <CartesianGrid strokeDasharray=\"5 5\" />\n              <XAxis dataKey=\"Date\" />\n              <YAxis yAxisId=\"left\" domain={[0, 'auto']} />\n              <Tooltip />\n              <Legend formatter={this.renderColorfulLegendText}/>\n              <Line strokeWidth=\"3\" yAxisId=\"left\" type=\"monotone\" dataKey=\"Cashflow\" stroke={config.color.blue} />\n              <Line strokeWidth=\"3\" yAxisId=\"left\" type=\"monotone\" dataKey=\"Ave12Cashflow\" stroke={config.color.green} />\n            </LineChart>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import config from \"./config\";\n\nexport function load(callback) {\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\n    window.gapi.client.sheets.spreadsheets.values\n      .batchGet({\n        spreadsheetId: config.spreadsheetId,\n        ranges: [\"Weight!A2:C\", \"YT!A2:C\", \"PI!A2:F\", \"Sheet1!A2:H\"]\n      })\n      .then(\n        response => {\n          const data = response.result.valueRanges;\n\n          const weight = data[0].values.map(d => ({\n            Date: d[0],\n            Weight: parseFloat(d[1]),\n            Goal: parseFloat(d[2]),\n          })) || [];\n\n          const yt = data[1].values.map(d => ({\n            Date: d[0],\n            ORS: parseFloat(d[1]),\n            Goal: parseFloat(d[2]),\n          })) || [];\n\n          const pi = data[2].values.map(d => ({\n            Date: d[0],\n            Goal: parseFloat(d[1]),\n            PI: parseFloat(d[2]),\n          })) || [];\n\n          const cashflow = data[3].values.map(d => ({\n            Date: d[0],\n            Cashflow: parseFloat(d[3]),\n            Ave12Cashflow: parseFloat(d[7]),\n          })) || [];\n\n          const result = {\n            weight,\n            yt,\n            pi,\n            cashflow\n          }\n            \n          callback(result);\n        },\n        response => {\n          callback(false, response.result.error);\n        }\n      );\n  });\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}